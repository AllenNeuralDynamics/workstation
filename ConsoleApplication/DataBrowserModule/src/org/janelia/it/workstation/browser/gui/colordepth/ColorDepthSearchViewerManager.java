package org.janelia.it.workstation.browser.gui.colordepth;

import java.awt.Component;

import org.janelia.it.workstation.browser.components.DomainListViewTopComponent;
import org.janelia.it.workstation.browser.components.ViewerManager;
import org.janelia.it.workstation.browser.events.Events;
import org.janelia.it.workstation.browser.events.selection.DomainObjectSelectionEvent;
import org.janelia.it.workstation.browser.util.Utils;
import org.janelia.model.domain.DomainObject;
import org.janelia.model.domain.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.eventbus.Subscribe;

/**
 * Manages the life cycle of the color depth search viewer.
 * 
 * @author <a href="mailto:rokickik@janelia.hhmi.org">Konrad Rokicki</a>
 */
public class ColorDepthSearchViewerManager implements ViewerManager<ColorDepthSearchTopComponent>  {

    private final static Logger log = LoggerFactory.getLogger(ColorDepthSearchViewerManager.class);
    
    public static ColorDepthSearchViewerManager instance;
    
    private ColorDepthSearchViewerManager() {
    }
    
    public static ColorDepthSearchViewerManager getInstance() {
        if (instance==null) {
            instance = new ColorDepthSearchViewerManager();
            Events.getInstance().registerOnEventBus(instance);
        }
        return instance;
    }

    /* Manage the active instance of this top component */
    
    private ColorDepthSearchTopComponent activeInstance;
    @Override
    public void activate(ColorDepthSearchTopComponent instance) {
        activeInstance = instance;
    }
    @Override
    public boolean isActive(ColorDepthSearchTopComponent instance) {
        return activeInstance == instance;
    }
    @Override
    public ColorDepthSearchTopComponent getActiveViewer() {
        return activeInstance;
    }

    @Override
    public String getViewerName() {
        return "ColorDepthSearchTopComponent";
    }
    
    @Override
    public Class<ColorDepthSearchTopComponent> getViewerClass() {
        return ColorDepthSearchTopComponent.class;
    }

    @Subscribe
    public void domainObjectsSelected(DomainObjectSelectionEvent event) {

        // We only care about single selections
        DomainObject domainObject = event.getObjectIfSingle();
        if (domainObject==null) {
            return;
        }
        
        // We only care about selection events
        if (!event.isSelect()) {
            log.debug("Event is not selection: {}",event);
            return;
        }

        // We only care about events generated by a domain list viewer
        if (!Utils.hasAncestorWithType((Component)event.getSource(),DomainListViewTopComponent.class)) {
            log.trace("Event source is not a list view: {}",event);
            return;
        }

        log.info("domainObjectSelected({})",Reference.createFor(domainObject));
        
        ColorDepthSearchTopComponent viewer = getActiveViewer();
        if (viewer!=null) {
            // If we are reacting to a selection event in another viewer, then this load is not user driven.
            viewer.loadDomainObject(domainObject, false);
        }
    }

}
