package org.janelia.it.workstation.gui.large_volume_viewer.top_component;

import static org.janelia.it.workstation.gui.large_volume_viewer.top_component.LargeVolumeViewerTopComponentDynamic.ACTION;
import static org.janelia.it.workstation.gui.large_volume_viewer.top_component.LargeVolumeViewerTopComponentDynamic.HINT;
import static org.janelia.it.workstation.gui.large_volume_viewer.top_component.LargeVolumeViewerTopComponentDynamic.LVV_PREFERRED_ID;
import static org.janelia.it.workstation.gui.large_volume_viewer.top_component.LargeVolumeViewerTopComponentDynamic.WINDOW_NAMER;

import java.awt.BorderLayout;

import javax.swing.JPopupMenu;
import javax.swing.ToolTipManager;

import org.janelia.console.viewerapi.model.NeuronSet;
import org.janelia.it.jacs.model.domain.DomainObject;
import org.janelia.it.jacs.model.domain.Reference;
import org.janelia.it.jacs.model.domain.tiledMicroscope.TmSample;
import org.janelia.it.jacs.model.domain.tiledMicroscope.TmWorkspace;
import org.janelia.it.jacs.shared.utils.StringUtils;
import org.janelia.it.workstation.gui.browser.events.Events;
import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.janelia.it.workstation.gui.large_volume_viewer.LargeVolumeViewViewer;
import org.janelia.it.workstation.gui.large_volume_viewer.annotation.AnnotationManager;
import org.janelia.it.workstation.gui.large_volume_viewer.api.TiledMicroscopeDomainMgr;
import org.janelia.it.workstation.gui.large_volume_viewer.options.ApplicationPanel;
import org.janelia.it.workstation.shared.workers.SimpleWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.it.workstation.gui.large_volume_viewer.top_component//LargeVolumeViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = LVV_PREFERRED_ID,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.janelia.it.workstation.gui.large_volume_viewer.top_component.LargeVolumeViewerTopComponent")
@ActionReference(path = "Menu/Window/Large Volume Viewer", position = 100)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LargeVolumeViewerAction",
        preferredID = LVV_PREFERRED_ID
)
@Messages({
    ACTION,
    WINDOW_NAMER,
    HINT
})
public final class LargeVolumeViewerTopComponent extends TopComponent {

    private static final Logger log = LoggerFactory.getLogger(LargeVolumeViewerTopComponent.class);
    
    public static final String TC_VERSION = "1.0";
    
    static {
        // So popup menu shows over GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
    }
    
    private final LargeVolumeViewerTopComponentDynamic state = new LargeVolumeViewerTopComponentDynamic();
    
    public static final LargeVolumeViewerTopComponent getInstance() {
        return (LargeVolumeViewerTopComponent)WindowManager.getDefault().findTopComponent(LVV_PREFERRED_ID);
    }
    
    public LargeVolumeViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_LargeVolumeViewerTopComponent());
        setToolTipText(Bundle.HINT_LargeVolumeViewerTopComponent());
        establishLookups();
    }

    public void openLargeVolumeViewer(DomainObject domainObject) {
        state.load(domainObject);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        jPanel1.add( state.getLvvv(), BorderLayout.CENTER );
        Events.getInstance().registerOnEventBus(state.getLvvv());
    }

    @Override
    public void componentClosed() {
        jPanel1.remove( state.getLvvv() );
        state.close();
        Events.getInstance().unregisterOnEventBus(state.getLvvv());
    }
    
    public LargeVolumeViewViewer getLvvv() {
        return state.getLvvv();
    }
    
    public AnnotationManager getAnnotationMgr() {
        return getLvvv().getQuadViewUi().getAnnotationMgr();
    }

    /**
     * A safe way to ask if editing functions (such as Actions) should be enabled. Returns false if the quad view has not yet been initialized.
     */
    public boolean editsAllowed() {
        return getLvvv().hasQuadViewUi() && getLvvv().getQuadViewUi().getAnnotationMgr().editsAllowed();
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", TC_VERSION);
        AnnotationManager annotationMgr = getAnnotationMgr();
        if (annotationMgr!=null) {
            DomainObject current = annotationMgr.getInitialObject();
            if (current!=null) {
                String objectRef = Reference.createFor(current).toString();
                log.info("Writing state: {}",objectRef);
                p.setProperty("objectRef", objectRef);
            }
            else {
                p.remove("objectRef");
            }
        }
    }

    void readProperties(java.util.Properties p) {

        String loadLastStr = NbPreferences.forModule(ApplicationPanel.class).get(ApplicationPanel.PREFERENCE_LOAD_LAST_OBJECT, ApplicationPanel.PREFERENCE_LOAD_LAST_OBJECT_DEFAULT);
        if (!Boolean.parseBoolean(loadLastStr)) {
            return;
        }
        
        String version = p.getProperty("version");
        final String objectStrRef = p.getProperty("objectRef");
        log.info("Reading state: {}",objectStrRef);
        if (TC_VERSION.equals(version) && !StringUtils.isEmpty(objectStrRef)) {

            SimpleWorker worker = new SimpleWorker() {
                DomainObject domainObject = null;
                
                @Override
                protected void doStuff() throws Exception {
                    Reference ref = Reference.createFor(objectStrRef);
                    TiledMicroscopeDomainMgr tmDomainMgr = TiledMicroscopeDomainMgr.getDomainMgr();
                    if (TmSample.class.getSimpleName().equals(ref.getTargetClassName())) {
                        domainObject = tmDomainMgr.getSample(ref.getTargetId());
                    }
                    else if (TmWorkspace.class.getSimpleName().equals(ref.getTargetClassName())) {
                        domainObject = tmDomainMgr.getWorkspace(ref.getTargetId());
                    }
                    else {
                        log.error("State object is unsupported by the LVV: "+ref);
                    }
                }

                @Override
                protected void hadSuccess() {
                    if (domainObject!=null) {
                        openLargeVolumeViewer(domainObject);
                    }
                }

                @Override
                protected void hadError(Throwable error) {
                    SessionMgr.getSessionMgr().handleException(error);
                }
            };
            worker.execute();
        }
    }
    
    protected void establishLookups() {
        LargeVolumeViewViewer lvvv = state.getLvvv();
        // Use Lookup to communicate sample location and camera position
        // TODO: separate data source from current view details
        LargeVolumeViewerLocationProvider locProvider = 
                new LargeVolumeViewerLocationProvider(lvvv);
        // Use Lookup to communicate neuron reconstructions.
        // Based on tutorial at https://platform.netbeans.org/tutorials/74/nbm-selection-1.html
        NeuronSet neurons = lvvv.getNeuronSetAdapter();
        
        associateLookup(Lookups.fixed(
            locProvider, 
            neurons));
    }
    
}
