package org.janelia.workstation.controller;

import com.fasterxml.jackson.databind.ObjectMapper
import org.janelia.messaging.core.impl.MessageSenderImpl
import org.janelia.model.domain.Reference
import org.janelia.model.domain.tiledMicroscope.TmNeuronMetadata
import org.janelia.workstation.controller.network.TiledMicroscopeDomainMgr
import spock.lang.Specification

class AnnotationModelSpec extends Specification {

    def user1Neuron
    def user4Neuron
    def systemOwnedNeuron



    def setup() {
        mapper = new ObjectMapper();

        user1Neuron = new TmNeuronMetadata();
    }

    def "save neuron with body"() {
        given:
        def msgHeader = [
                (NeuronMessageHeaders.USER)     : LongStringHelper.asLongString("user:testuser1"),
                (NeuronMessageHeaders.NEURONIDS): ["2468630633941827729"],
                (NeuronMessageHeaders.WORKSPACE): LongStringHelper.asLongString("2463496977254449297"),
                (NeuronMessageHeaders.TYPE)     : LongStringHelper.asLongString("NEURON_SAVE_NEURONDATA")
        ]
        def msgBody = mapper.writeValueAsBytes(user1Neuron);

        when:
        persistNeuronHandler.handleMessage(msgHeader, msgBody)

        then:
        1 * domainMgr.saveMetadata(_, _)
        1 * replySuccessSender.sendMessage(_, _)
        0 * replyErrorSender.sendMessage(_, _)
    }
}