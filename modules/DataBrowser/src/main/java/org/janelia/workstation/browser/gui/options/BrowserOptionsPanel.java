package org.janelia.workstation.browser.gui.options;

import java.awt.BorderLayout;
import java.awt.Dimension;

import javax.swing.JCheckBox;
import javax.swing.JSlider;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.janelia.workstation.browser.gui.listview.icongrid.ImagesPanel;
import org.janelia.workstation.common.gui.support.GroupedKeyValuePanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

final class BrowserOptionsPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(BrowserOptionsPanel.class);

    private final BrowserOptionsPanelController controller;
    private final GroupedKeyValuePanel mainPanel;
    
    private JCheckBox unloadImagesCheckbox;
    private JCheckBox disableImageDrag;
    private JCheckBox allowDuplicateAnnotations;
    private JCheckBox showAnnotationTables;
    private JSlider annotationTableHeight;

    DocumentListener listener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            controller.changed();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            controller.changed();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            controller.changed();
        }
    };
    
    BrowserOptionsPanel(BrowserOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        this.mainPanel = new GroupedKeyValuePanel();
        add(mainPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    void load() {

        log.info("Loading browser settings...");
        mainPanel.removeAll();

        mainPanel.addSeparator("Image Browser");

        // Unload Images

        unloadImagesCheckbox = new JCheckBox();
        unloadImagesCheckbox.setText("Unload images which are not visible on the screen");
        unloadImagesCheckbox.addActionListener(evt -> controller.changed());
        unloadImagesCheckbox.setSelected(BrowserOptions.getInstance().isUnloadImages());

        mainPanel.addItem(unloadImagesCheckbox);

        // Disable drag/drop
        
        disableImageDrag = new JCheckBox();
        disableImageDrag.setText("Disable drag and drop in the image viewer");
        disableImageDrag.addActionListener(evt -> controller.changed());
        disableImageDrag.setSelected(BrowserOptions.getInstance().isDragAndDropDisabled());

        mainPanel.addItem(disableImageDrag);

        // Allow duplicate annotation keys
        
        allowDuplicateAnnotations = new JCheckBox();
        allowDuplicateAnnotations.setText("Allow duplicate annotations on a single item");
        allowDuplicateAnnotations.addActionListener(evt -> controller.changed());
        allowDuplicateAnnotations.setSelected(BrowserOptions.getInstance().isDuplicateAnnotationAllowed());
     
        mainPanel.addItem(allowDuplicateAnnotations);
        
        // Use Annotation Tables
        
        showAnnotationTables = new JCheckBox();
        showAnnotationTables.setText("Show annotations in a table instead of a tag cloud");
        showAnnotationTables.addActionListener((e) -> {
            controller.changed();
        });
        showAnnotationTables.setSelected(BrowserOptions.getInstance().isShowAnnotationTables());

        mainPanel.addItem(showAnnotationTables);

        // Annotation table height

        annotationTableHeight = new JSlider(ImagesPanel.MIN_TABLE_HEIGHT, ImagesPanel.MAX_TABLE_HEIGHT, ImagesPanel.DEFAULT_TABLE_HEIGHT);
        annotationTableHeight.putClientProperty("Slider.paintThumbArrowShape", Boolean.TRUE);
        annotationTableHeight.setMaximumSize(new Dimension(300, Integer.MAX_VALUE));
        annotationTableHeight.addChangeListener((e) -> {
            controller.changed();
        });

        annotationTableHeight.setValue(BrowserOptions.getInstance().getAnnotationTableHeight());

        mainPanel.addItem("Annotation table height", annotationTableHeight);
    }

    void store() {
        BrowserOptions.getInstance().setUnloadImages(unloadImagesCheckbox.isSelected());
        BrowserOptions.getInstance().setDragAndDropDisabled(disableImageDrag.isSelected());
        BrowserOptions.getInstance().setDuplicateAnnotationAllowed(allowDuplicateAnnotations.isSelected());
        BrowserOptions.getInstance().setShowAnnotationTables(showAnnotationTables.isSelected());
        BrowserOptions.getInstance().setAnnotationTableHeight(annotationTableHeight.getValue());
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
