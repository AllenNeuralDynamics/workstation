package org.janelia.workstation.gui.full_skeleton_view.top_component;

import java.awt.BorderLayout;

import javax.swing.JPanel;

import org.janelia.workstation.common.gui.support.WindowLocator;
import org.janelia.workstation.controller.NeuronManager;
import org.janelia.workstation.gui.full_skeleton_view.data_source.AnnotationSkeletonDataSourceI;
import org.janelia.workstation.gui.full_skeleton_view.viewer.AnnotationSkeletonPanel;
import org.janelia.workstation.gui.large_volume_viewer.QuadViewUi;
import org.janelia.workstation.controller.tileimagery.TileFormat;
import org.janelia.workstation.gui.large_volume_viewer.skeleton.Skeleton;
import org.janelia.workstation.gui.large_volume_viewer.LargeVolumeViewerTopComponent;

/**
 * Takes on as much non-autogenerated behavior for the TopComponent, as is
 * possible.  The goal is to minimize impact of studio-regeneration of the
 * top component that is populated by this.
 *
 * @author fosterl
 */
public class TopComponentPopulator {
    private AnnotationSkeletonPanel skeletonPanel;
    
    public void populate(JPanel panel) {
        depopulate(panel);
        if (skeletonPanel == null) {
            skeletonPanel = new AnnotationSkeletonPanel( new SkeletonDataSource() );
        }
        panel.add(skeletonPanel, BorderLayout.CENTER);
    }
    
    public void depopulate(JPanel panel) {
        if (panel != null && skeletonPanel != null) {
            panel.remove(skeletonPanel);
            skeletonPanel.close();
            skeletonPanel = null;
        }
    }
    
    private static class SkeletonDataSource implements AnnotationSkeletonDataSourceI {

        private Skeleton skeleton;
        private NeuronManager annotationModel;

        public SkeletonDataSource() {
        }
        
        @Override
        public Skeleton getSkeleton() {
            if (skeleton == null) {
                cacheValues();
            }
            return skeleton;
        }

        @Override
        public TileFormat getTileFormat() {
            return skeleton.getTileFormat();
        }
        
        @Override
        public NeuronManager getAnnotationModel() {
            if (annotationModel == null) {
                cacheValues();
            }
            return annotationModel;
        }
        
        private void cacheValues() {
            // Strategy: get the Large Volume Viewer View.
            LargeVolumeViewerTopComponent tc = 
                    (LargeVolumeViewerTopComponent) WindowLocator.getByName(
                            LargeVolumeViewerTopComponent.LVV_PREFERRED_ID
                    );
            if (tc != null) {
                QuadViewUi ui = tc.getQuadViewUi();
                if (ui != null) {
                    skeleton = ui.getSkeleton();
                    annotationModel = ui.getAnnotationModel();    
                }
            }
        }

    }
}
